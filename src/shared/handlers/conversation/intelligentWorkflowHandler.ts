// src/shared/handlers/conversation/intelligentWorkflowHandler.ts
import { Logger } from "../../utils/logger";
import { IntegrationExecutorHandler } from "../integrations/integrationExecutorHandler";
import { IntegrationAction } from "../../models/integration.model";
import { ContextResult, IntegrationInfo } from "../../models/conversation.model";

// Definici√≥n de workflows obligatorios
interface WorkflowStep {
  toolName: string;
  action: string;
  required: boolean;
  conditional?: string; // Condici√≥n para ejecutar este step
  parameters?: Record<string, any>;
}

interface WorkflowDefinition {
  name: string;
  triggers: string[];
  priority: number; // Mayor n√∫mero = mayor prioridad
  steps: WorkflowStep[];
  description: string;
}

interface WorkflowResult {
  workflowExecuted: boolean;
  workflowName?: string;
  results: Array<{
    stepName: string;
    success: boolean;
    result: any;
    error?: string;
  }>;
  enhancedContext: string; // Contexto adicional para el LLM
}

export class IntelligentWorkflowHandler {
  private logger: Logger;
  private integrationExecutor: IntegrationExecutorHandler;

  // WORKFLOWS DEFINIDOS - Aqu√≠ est√° la inteligencia
  private workflows: WorkflowDefinition[] = [
    {
      name: "appointment_management",
      triggers: [
        "cita", "citas", "appointment", "appointments", "agendar", "programar", 
        "schedule", "meeting", "reuni√≥n", "consulta", "consultas",
        "cambiar mi cita", "mover mi cita", "reagendar", "cancelar mi cita",
        "modificar mi cita", "eliminar mi cita", "borrar mi cita"
      ],
      priority: 10,
      steps: [
        {
          toolName: "getMyBookedCalendarEvents",
          action: "getMyBookedEvents", 
          required: true,
          parameters: {
            startDate: new Date().toISOString(),
            endDate: new Date(Date.now() + 365 * 24 * 60 * 60 * 1000).toISOString()
          }
        }
      ],
      description: "Siempre verificar citas existentes cuando se menciona cualquier palabra relacionada con citas"
    },
    {
      name: "check_my_appointments",
      triggers: [
        "qu√© citas tengo", "cu√°les son mis citas", "mis citas", "my appointments",
        "tengo citas", "ver mis citas", "mostrar mis citas", "listar mis citas",
        "cu√°ntas citas tengo", "check my appointments", "show my appointments"
      ],
      priority: 15,
      steps: [
        {
          toolName: "getMyBookedCalendarEvents", 
          action: "getMyBookedEvents",
          required: true,
          parameters: {
            startDate: new Date().toISOString(),
            endDate: new Date(Date.now() + 365 * 24 * 60 * 60 * 1000).toISOString()
          }
        }
      ],
      description: "Consultar citas cuando el usuario pregunta espec√≠ficamente por ellas"
    },
    {
      name: "reschedule_detection",
      triggers: [
        "cambiar", "mover", "reagendar", "modificar", "actualizar",
        "reschedule", "change", "move", "update"
      ],
      priority: 12,
      steps: [
        {
          toolName: "getMyBookedCalendarEvents",
          action: "getMyBookedEvents", 
          required: true,
          parameters: {
            startDate: new Date().toISOString(),
            endDate: new Date(Date.now() + 365 * 24 * 60 * 60 * 1000).toISOString()
          }
        }
      ],
      description: "Verificar citas existentes cuando se detecta intenci√≥n de modificaci√≥n"
    }
  ];

  constructor(logger: Logger) {
    this.logger = logger;
    this.integrationExecutor = new IntegrationExecutorHandler(logger);
  }

  /**
   * PUNTO PRINCIPAL: Detecta y ejecuta workflows autom√°ticamente
   */
  async detectAndExecuteWorkflow(
    userMessage: string,
    context: ContextResult,
    conversationId: string,
    userId: string
  ): Promise<WorkflowResult> {
    
    const userMessageLower = userMessage.toLowerCase();
    
    // 1. DETECTAR QU√â WORKFLOW APLICAR
    const matchedWorkflow = this.findMatchingWorkflow(userMessageLower);
    
    if (!matchedWorkflow) {
      return {
        workflowExecuted: false,
        results: [],
        enhancedContext: ""
      };
    }

    this.logger.info(`üîÑ Workflow detectado: "${matchedWorkflow.name}" para mensaje: "${userMessage.substring(0, 50)}..."`);

    // 2. EJECUTAR STEPS DEL WORKFLOW
    const results: WorkflowResult['results'] = [];
    let enhancedContext = `\n\n### ü§ñ INFORMACI√ìN OBTENIDA AUTOM√ÅTICAMENTE (${matchedWorkflow.name}):\n`;

    for (const step of matchedWorkflow.steps) {
      try {
        // Encontrar la integraci√≥n necesaria
        const integration = this.findRequiredIntegration(step.toolName, context.activeIntegrations || []);
        
        if (!integration) {
          this.logger.warn(`‚ö†Ô∏è No se encontr√≥ integraci√≥n activa para herramienta: ${step.toolName}`);
          results.push({
            stepName: step.toolName,
            success: false,
            result: null,
            error: `Integraci√≥n no disponible para ${step.toolName}`
          });
          continue;
        }

        // Ejecutar la acci√≥n
        const actionRequest: IntegrationAction = {
          integrationId: integration.id,
          action: step.action,
          parameters: step.parameters || {},
          userId: userId,
          conversationId: conversationId,
          messageId: `workflow-${Date.now()}`,
          async: false
        };

        this.logger.info(`üîß Ejecutando step: ${step.toolName} -> ${step.action}`);
        const stepResult = await this.integrationExecutor.execute(actionRequest, userId);

        if (stepResult.success) {
          results.push({
            stepName: step.toolName,
            success: true,
            result: stepResult.result
          });

          // CONSTRUIR CONTEXTO INTELIGENTE
          enhancedContext += this.buildContextFromResult(step.toolName, stepResult.result);
          
        } else {
          results.push({
            stepName: step.toolName,
            success: false,
            result: stepResult.result,
            error: stepResult.error
          });
          
          enhancedContext += `‚ùå Error al obtener ${step.toolName}: ${stepResult.error}\n`;
        }

      } catch (error) {
        this.logger.error(`üí• Error ejecutando step ${step.toolName}:`, error);
        results.push({
          stepName: step.toolName,
          success: false,
          result: null,
          error: error instanceof Error ? error.message : String(error)
        });
      }
    }

    // 3. A√ëADIR INSTRUCCIONES ESPEC√çFICAS AL CONTEXTO
    enhancedContext += this.buildWorkflowSpecificInstructions(matchedWorkflow, results, userMessage);

    return {
      workflowExecuted: true,
      workflowName: matchedWorkflow.name,
      results,
      enhancedContext
    };
  }

  /**
   * Encuentra el workflow m√°s espec√≠fico que coincida
   */
  private findMatchingWorkflow(userMessage: string): WorkflowDefinition | null {
    let bestMatch: WorkflowDefinition | null = null;
    let bestScore = 0;

    for (const workflow of this.workflows) {
      const score = this.calculateWorkflowScore(userMessage, workflow);
      if (score > bestScore) {
        bestScore = score;
        bestMatch = workflow;
      }
    }

    return bestScore > 0 ? bestMatch : null;
  }

  /**
   * Calcula qu√© tan bien coincide un workflow con el mensaje
   */
  private calculateWorkflowScore(userMessage: string, workflow: WorkflowDefinition): number {
    let score = 0;

    for (const trigger of workflow.triggers) {
      if (userMessage.includes(trigger.toLowerCase())) {
        // Dar m√°s puntos a coincidencias m√°s largas y espec√≠ficas
        score += trigger.length * workflow.priority;
        
        // Bonus por coincidencias exactas de frases
        if (trigger.includes(" ") && userMessage.includes(trigger)) {
          score += 50;
        }
      }
    }

    return score;
  }

  /**
   * Encuentra la integraci√≥n necesaria para una herramienta
   */
  private findRequiredIntegration(toolName: string, activeIntegrations: IntegrationInfo[]): IntegrationInfo | null {
    // Mapeo de herramientas a tipos de integraci√≥n
    const toolIntegrationMap: Record<string, { type: string, provider: string }> = {
      "getMyBookedCalendarEvents": { type: "calendar", provider: "google" },
      "createGoogleCalendarEvent": { type: "calendar", provider: "google" },
      "updateGoogleCalendarEvent": { type: "calendar", provider: "google" },
      "deleteGoogleCalendarEvent": { type: "calendar", provider: "google" },
      "sendWhatsAppTextMessage": { type: "messaging", provider: "whatsapp" },
      "sendWhatsAppTemplateMessage": { type: "messaging", provider: "whatsapp" }
    };

    const requiredIntegration = toolIntegrationMap[toolName];
    if (!requiredIntegration) {
      return null;
    }

    return activeIntegrations.find(integration => 
      integration.type === requiredIntegration.type && 
      integration.provider === requiredIntegration.provider
    ) || null;
  }

  /**
   * Construye contexto inteligente basado en los resultados
   */
  private buildContextFromResult(toolName: string, result: any): string {
    switch (toolName) {
      case "getMyBookedCalendarEvents":
        if (result?.events && Array.isArray(result.events)) {
          if (result.events.length === 0) {
            return "‚úÖ **CITAS ACTUALES**: El usuario NO tiene citas programadas actualmente.\n";
          } else {
            let contextText = `‚úÖ **CITAS ACTUALES**: El usuario tiene ${result.events.length} cita(s) programada(s):\n`;
            result.events.forEach((event: any, index: number) => {
              const startTime = event.start?.dateTime || event.start?.date;
              const summary = event.summary || 'Sin t√≠tulo';
              contextText += `   ${index + 1}. "${summary}" - ${startTime} (ID: ${event.id})\n`;
            });
            return contextText + "\n";
          }
        }
        return "‚ö†Ô∏è No se pudo obtener informaci√≥n de citas.\n";

      default:
        return `‚úÖ ${toolName}: ${JSON.stringify(result).substring(0, 200)}...\n`;
    }
  }

  /**
   * Construye instrucciones espec√≠ficas para el workflow
   */
  private buildWorkflowSpecificInstructions(
    workflow: WorkflowDefinition, 
    results: WorkflowResult['results'], 
    userMessage: string
  ): string {
    let instructions = "\n### üéØ INSTRUCCIONES ESPEC√çFICAS PARA ESTA CONVERSACI√ìN:\n";

    
    switch (workflow.name) {
      case "appointment_management":
      case "reschedule_detection":
        const appointmentResult = results.find(r => r.stepName === "getMyBookedCalendarEvents");
        if (appointmentResult?.success) {
          const events = appointmentResult.result?.events || [];
          
          if (events.length === 0) {
            instructions += "- ‚úÖ El usuario NO tiene citas existentes\n";
            instructions += "- üìù Si quiere agendar una NUEVA cita, pregunta por email y nombre\n";
            instructions += "- üî¥ NUNCA uses updateGoogleCalendarEvent o deleteGoogleCalendarEvent sin citas existentes\n";
          } else {
            instructions += `- ‚úÖ El usuario tiene ${events.length} cita(s) existente(s)\n`;
            
            if (this.isModificationIntent(userMessage)) {
              instructions += "- üîÑ INTENCI√ìN DE MODIFICACI√ìN detectada\n";
              instructions += "- üìã Muestra las citas existentes y pregunta cu√°l quiere modificar\n";
              instructions += "- ‚ö° Usa updateGoogleCalendarEvent con el eventId correcto\n";
              instructions += "- üî¥ NUNCA uses createGoogleCalendarEvent para modificaciones\n";
            } else {
              instructions += "- ‚ö†Ô∏è Si menciona 'cambiar', 'mover', 'reagendar' ‚Üí usar updateGoogleCalendarEvent\n";
              instructions += "- ‚ö†Ô∏è Si menciona 'cancelar', 'eliminar' ‚Üí usar deleteGoogleCalendarEvent\n";
              instructions += "- ‚ö†Ô∏è Para NUEVA cita adicional ‚Üí usar createGoogleCalendarEvent\n";
            }
          }
        }
        break;

      case "check_my_appointments":
        const checkResult = results.find(r => r.stepName === "getMyBookedCalendarEvents");
        if (checkResult?.success) {
          const events = checkResult.result?.events || [];
          instructions += `- üìä Mostrar las ${events.length} cita(s) encontrada(s) de forma clara y organizada\n`;
          instructions += "- üìÖ Incluir fechas, horas y t√≠tulos de cada cita\n";
          instructions += "- üîó Mencionar que puede modificar o cancelar si lo desea\n";
        }
        break;
    }

    instructions += "\n### ‚ö° REGLAS CR√çTICAS:\n";
    instructions += "- üîí NUNCA ignores la informaci√≥n obtenida autom√°ticamente arriba\n";
    instructions += "- üîç La informaci√≥n de citas es ACTUAL y PRECISA\n";
    instructions += "- ‚úÖ Usa esta informaci√≥n como base de tu respuesta\n";
    instructions += "- üö´ NO inventes informaci√≥n sobre citas\n\n";

    return instructions;
  }

  /**
   * Detecta si el mensaje tiene intenci√≥n de modificar algo existente
   */
  private isModificationIntent(userMessage: string): boolean {
    const modificationKeywords = [
      "cambiar", "mover", "reagendar", "modificar", "actualizar", "cancelar", "eliminar",
      "change", "move", "reschedule", "modify", "update", "cancel", "delete"
    ];
    
    const messageLower = userMessage.toLowerCase();
    return modificationKeywords.some(keyword => messageLower.includes(keyword));
  }
  
}